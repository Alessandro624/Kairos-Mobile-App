/**
 * Kairos Backend API
 * This API provides endpoints for the Kairos Backend application.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.EventCreateDTO
import io.swagger.client.models.EventDTO
import io.swagger.client.models.EventUpdateDTO
import io.swagger.client.models.Filter
import io.swagger.client.models.PageEventDTO
import io.swagger.client.models.Pageable
import io.swagger.client.models.ServiceError

import io.swagger.client.infrastructure.*

class EventControllerApi(basePath: kotlin.String = "http://10.0.2.2:8080") : ApiClient(basePath) {

    /**
     * Create a new event
     * Allows an authorized user to create a new event by providing details such as name, date, location, and description.
     * @param body  
     * @return EventDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun createEvent(body: EventCreateDTO): EventDTO {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/v1/events"
        )
        val response = request<EventDTO>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as EventDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Delete an event
     * Delete an existing event by its ID. Only authorized users can delete events.
     * @param id  
     * @return void
     */
    fun deleteEvent(id: kotlin.Any): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/v1/events/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get all events
     * Retrieve a list of all events.
     * @param pageable  
     * @param filter  (optional)
     * @return PageEventDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun getAllEvents(pageable: Pageable, filter: Filter? = null): PageEventDTO {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("pageable", listOf(pageable.toString()))
            if (filter != null) {
                put("filter", listOf(filter.toString()))
            }
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/events", query = localVariableQuery
        )
        val response = request<PageEventDTO>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PageEventDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get an event by ID
     * Retrieve detailed information about a specific event, including name, date, location, description, and associated details.
     * @param id  
     * @return EventDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun getEventById(id: kotlin.Any): EventDTO {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/events/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<EventDTO>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as EventDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Update an event
     * Update an existing event by ID. Only authorized users can perform this operation.
     * @param body  
     * @param id  
     * @return EventDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun updateEvent(body: EventUpdateDTO, id: kotlin.Any): EventDTO {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/v1/events/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<EventDTO>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as EventDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
