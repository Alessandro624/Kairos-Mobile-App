/**
 * Kairos Backend API
 * This API provides endpoints for the Kairos Backend application.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.AuthRequest
import io.swagger.client.models.AuthResponse
import io.swagger.client.models.PasswordResetConfirmation
import io.swagger.client.models.PasswordResetRequest
import io.swagger.client.models.ServiceError
import io.swagger.client.models.UserCreateDTO

import io.swagger.client.infrastructure.*

class AuthenticationApi(basePath: kotlin.String = "http://10.0.2.2:8080") : ApiClient(basePath) {

    private val redirectUri: kotlin.String = "kairosapp://auth/callback"

    /**
     * Request password reset
     * Initiates the password reset process by sending a reset link to the user&#x27;s email if the user exists.
     * @param body User&#x27;s username or email
     * @return kotlin.Any
     */
    @Suppress("UNCHECKED_CAST")
    fun forgotPassword(body: PasswordResetRequest): kotlin.Any {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/v1/auth/forgot-password"
        )

        val response = request<kotlin.Any>(
            localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data
                ?: response.statusCode as kotlin.Any

            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     * Login user
     * Authenticates a user and returns JWT and refresh tokens.
     * @param body Authentication request with username/email and password
     * @return AuthResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun login(body: AuthRequest): AuthResponse {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/v1/auth/login"
        )
        val response = request<AuthResponse>(
            localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as AuthResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     * OAuth2 login failure message
     * Endpoint to indicate a failed OAuth2 login attempt.
     * @return kotlin.Any
     */
    @Suppress("UNCHECKED_CAST")
    fun oAuth2LoginFailure(): kotlin.Any {
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v1/auth/oauth2/login/failure"
        )
        val response = request<kotlin.Any>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data
                ?: response.statusCode as kotlin.Any

            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     * Refresh JWT token
     * Refreshes the JWT token using a valid refresh token.
     * @param body Refresh token
     * @return AuthResponse
     */
    fun refresh(body: kotlin.String, authorization: kotlin.String?): AuthResponse {
        val localVariableBody: kotlin.Any? = body
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "text/plain"
        authorization?.apply { localVariableHeaders["Authorization"] = "Bearer $this" }

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/v1/auth/refresh", headers = localVariableHeaders
        )

        val response = request<AuthResponse>(
            localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as AuthResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     * Register new user
     * Registers a new user account.
     * @param body User registration details (username, email, password)
     * @return kotlin.Any
     */
    @Suppress("UNCHECKED_CAST")
    fun register(body: UserCreateDTO): kotlin.Any {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/v1/auth/register"
        )
        val response = request<kotlin.Any>(
            localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data
                ?: response.statusCode as kotlin.Any

            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     * Confirm password reset
     * Resets the user&#x27;s password using a valid reset token.
     * @param body New password and the reset token
     * @return kotlin.Any
     */
    @Suppress("UNCHECKED_CAST")
    fun resetPassword(body: PasswordResetConfirmation): kotlin.Any {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/v1/auth/reset-password"
        )
        val response = request<kotlin.Any>(
            localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data
                ?: response.statusCode as kotlin.Any

            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    fun loginWithGoogle(): String {
        return "${baseUrl}/v1/auth/oauth2/authorize/google?redirect_uri=${redirectUri}"
    }

    fun loginWithKeycloak(): String {
        return "${baseUrl}/v1/auth/oauth2/authorize/keycloak?redirect_uri=${redirectUri}"
    }
}
