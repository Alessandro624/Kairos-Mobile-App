/**
 * Kairos Backend API
 * This API provides endpoints for the Kairos Backend application.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.Sector
import io.swagger.client.models.ServiceError

import io.swagger.client.infrastructure.*

class SectorControllerApi(basePath: kotlin.String = "http://10.0.2.2:8080") : ApiClient(basePath) {

    /**
     * 
     * 
     * @param body  
     * @return Sector
     */
    @Suppress("UNCHECKED_CAST")
    fun createSector(body: Sector): Sector {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/structures/sectors"
        )
        val response = request<Sector>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Sector
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param id  
     * @return void
     */
    fun deleteSector(id: kotlin.Any): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/api/structures/sectors/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @return kotlin.Any
     */
    @Suppress("UNCHECKED_CAST")
    fun getAllSectors(): kotlin.Any {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/structures/sectors"
        )
        val response = request<kotlin.Any>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param id  
     * @return Sector
     */
    @Suppress("UNCHECKED_CAST")
    fun getSectorById(id: kotlin.Any): Sector {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/structures/sectors/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<Sector>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Sector
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
