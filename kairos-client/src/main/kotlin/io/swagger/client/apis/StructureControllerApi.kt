/**
 * Kairos Backend API
 * This API provides endpoints for the Kairos Backend application.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.PageStructureDTO
import io.swagger.client.models.ServiceError
import io.swagger.client.models.StructureCreateDTO
import io.swagger.client.models.StructureDTO
import io.swagger.client.models.StructureDetailsDTO
import io.swagger.client.models.StructureFilterDTO

import io.swagger.client.infrastructure.*

class StructureControllerApi(basePath: kotlin.String = "http://10.0.2.2:8080") : ApiClient(basePath) {

    /**
     * 
     * 
     * @param body  
     * @return StructureDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun createStructure(body: StructureCreateDTO): StructureDTO {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/structures"
        )
        val response = request<StructureDTO>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as StructureDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param id  
     * @return void
     */
    fun deleteStructure(id: kotlin.Any): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/api/structures/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param structureFilterDTO  
     * @param page  (optional, default to 0)
     * @param size  (optional, default to 10)
     * @param sortBy  (optional, default to id)
     * @param direction  (optional, default to DESC)
     * @return PageStructureDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun getAllPreviewStructures(structureFilterDTO: StructureFilterDTO, page: kotlin.Any? = null, size: kotlin.Any? = null, sortBy: kotlin.Any? = null, direction: kotlin.Any? = null): PageStructureDTO {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (page != null) {
                put("page", listOf(page.toString()))
            }
            if (size != null) {
                put("size", listOf(size.toString()))
            }
            if (sortBy != null) {
                put("sortBy", listOf(sortBy.toString()))
            }
            if (direction != null) {
                put("direction", listOf(direction.toString()))
            }
            put("structureFilterDTO", listOf(structureFilterDTO.toString()))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/structures", query = localVariableQuery
        )
        val response = request<PageStructureDTO>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PageStructureDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param id  
     * @return kotlin.Any
     */
    @Suppress("UNCHECKED_CAST")
    fun getSectorsByStructureId(id: kotlin.Any): kotlin.Any {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/structures/{id}/sectors".replace("{" + "id" + "}", "$id")
        )
        val response = request<kotlin.Any>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param id  
     * @return StructureDetailsDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun getStructureDetails(id: kotlin.Any): StructureDetailsDTO {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/structures/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<StructureDetailsDTO>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as StructureDetailsDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
