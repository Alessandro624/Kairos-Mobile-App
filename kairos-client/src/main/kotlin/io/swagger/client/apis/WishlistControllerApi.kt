/**
 * Kairos Backend API
 * This API provides endpoints for the Kairos Backend application.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.PageWishlistDTO
import io.swagger.client.models.ServiceError
import io.swagger.client.models.WishlistCreateDTO
import io.swagger.client.models.WishlistDTO
import io.swagger.client.models.WishlistFilterDTO
import io.swagger.client.models.WishlistUpdateDTO

import io.swagger.client.infrastructure.*

class WishlistControllerApi(basePath: kotlin.String = "http://10.0.2.2:8080") : ApiClient(basePath) {

    /**
     * 
     * 
     * @param wishlistId  
     * @param eventId  
     * @return WishlistDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun addEventToWishlist(wishlistId: kotlin.Any, eventId: kotlin.Any): WishlistDTO {
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/v1/auth/{wishlistId}/events/{eventId}".replace("{" + "wishlistId" + "}", "$wishlistId").replace("{" + "eventId" + "}", "$eventId")
        )
        val response = request<WishlistDTO>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as WishlistDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param wishlistId  
     * @param userId  
     * @return WishlistDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun addUserToWishlist(wishlistId: kotlin.Any, userId: kotlin.Any): WishlistDTO {
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/v1/auth/{wishlistId}/users/{userId}".replace("{" + "wishlistId" + "}", "$wishlistId").replace("{" + "userId" + "}", "$userId")
        )
        val response = request<WishlistDTO>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as WishlistDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param creatorId  
     * @return kotlin.Any
     */
    @Suppress("UNCHECKED_CAST")
    fun countWishlistsByCreator(creatorId: kotlin.Any): kotlin.Any {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/auth/creators/{creatorId}/count".replace("{" + "creatorId" + "}", "$creatorId")
        )
        val response = request<kotlin.Any>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param body  
     * @return WishlistDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun createWishlist(body: WishlistCreateDTO): WishlistDTO {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/v1/auth"
        )
        val response = request<WishlistDTO>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as WishlistDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param wishlistId  
     * @return void
     */
    fun deleteWishlist(wishlistId: kotlin.Any): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/v1/auth/{wishlistId}".replace("{" + "wishlistId" + "}", "$wishlistId")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param wishlistId  
     * @return WishlistDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun getWishlistById(wishlistId: kotlin.Any): WishlistDTO {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/auth/{wishlistId}".replace("{" + "wishlistId" + "}", "$wishlistId")
        )
        val response = request<WishlistDTO>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as WishlistDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param body  
     * @param page  
     * @param size  
     * @return PageWishlistDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun getWishlists(body: WishlistFilterDTO, page: kotlin.Any, size: kotlin.Any): PageWishlistDTO {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("page", listOf(page.toString()))
            put("size", listOf(size.toString()))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/v1/auth/filter", query = localVariableQuery
        )
        val response = request<PageWishlistDTO>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PageWishlistDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param wishlistId  
     * @param eventId  
     * @return void
     */
    fun removeEventFromWishlist(wishlistId: kotlin.Any, eventId: kotlin.Any): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/v1/auth/{wishlistId}/events/{eventId}".replace("{" + "wishlistId" + "}", "$wishlistId").replace("{" + "eventId" + "}", "$eventId")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param wishlistId  
     * @param userId  
     * @return void
     */
    fun removeUserFromWishlist(wishlistId: kotlin.Any, userId: kotlin.Any): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/v1/auth/{wishlistId}/users/{userId}".replace("{" + "wishlistId" + "}", "$wishlistId").replace("{" + "userId" + "}", "$userId")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param body  
     * @param wishlistId  
     * @return WishlistDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun updateWishlist(body: WishlistUpdateDTO, wishlistId: kotlin.Any): WishlistDTO {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/v1/auth/{wishlistId}".replace("{" + "wishlistId" + "}", "$wishlistId")
        )
        val response = request<WishlistDTO>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as WishlistDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param creatorId  
     * @param name  
     * @return kotlin.Any
     */
    @Suppress("UNCHECKED_CAST")
    fun wishlistAlreadyExists(creatorId: kotlin.Any, name: kotlin.Any): kotlin.Any {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("creatorId", listOf(creatorId.toString()))
            put("name", listOf(name.toString()))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/auth/exists", query = localVariableQuery
        )
        val response = request<kotlin.Any>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
